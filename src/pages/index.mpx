<template>
  <view class="todoapp">
    <view class="view">
      <view class="h1">todos</view>
      <input
        class="new-todo"
        autofocus
        autocomplete="off"
        placeholder="What needs to be done?"
        wx:model="{{newTodo}}"
        bind:confirm="addTodo"
      />
    </view>
    <view class="main" hidden="{{!todos.length}}">
      <checkbox id="toggle-all" class="toggle-all" wx:model="{{allDone}}" />
      <label for="toggle-all"></label>
      <view class="todo-list">
        <view class="todo li" wx:for="{{todos}}" wx:for-item="todo" wx:key="id"
          wx:class="{{{ completed: todo.completed, editing: todo == editedTodo }}}"
        >
          <view class="view">
            <checkbox class="toggle" wx:model="{{todo.completed}}" />
            <view class="label" bind:tap="editTodo(todo)">{{ todo.title }}</view>
            <button class="destroy" bind:tap="removeTodo(todo)"></button>
          </view>
          <input
            class="edit"
            type="text"
            wx:model="{{todo.title}}"
            bind:blur="cancelEdit(todo)"
            bind:confirm="doneEdit(todo)"
          />
        </view>
      </view>
    </view>
    <view class="view" hidden="{{!todos.length}}">
      <text class="todo-count">
        <text class="strong">{{ remaining }}</text> left
      </text>
      <view class="filters">
        <text class="li">
          <text class="a" wx:class="{{{ selected: visibility == 'all' }}}">All</text>
        </text>
        <text class="li">
          <text class="a" wx:class="{{{ selected: visibility == 'active' }}}"
            >Active</text
          >
        </text>
        <text class="li">
          <text class="a"
            wx:class="{{{ selected: visibility == 'completed' }}}"
            >Completed</text
          >
        </text>
      </view>
      <button
        class="clear-completed"
        bind:tap="removeCompleted"
        hidden="{{todos.length <= remaining}}"
      >
        Clear
      </button>
    </view>
  </view>
  <view class="info">
    <view>Longpress to edit a todo</view>
    <view>Written by <text class="a" href="http://blog.erguotou.me">erguotou</text></view>
    <view>Part of <text class="a" href="http://todomvc.com">TodoMVC</text></view>
  </view>
</template>

<script>
import { createPage } from '@mpxjs/core'
import { fetch, save } from '../utils/storage.js'
import { generateId } from '../utils'

// visibility filters
const filters = {
  all: function (todos) {
    return todos
  },
  active: function (todos) {
    return todos.filter(function (todo) {
      return !todo.completed
    })
  },
  completed: function (todos) {
    return todos.filter(function (todo) {
      return todo.completed
    })
  }
}

createPage({
  data: {
    todos: fetch(),
    newTodo: '',
    editedTodo: null,
    visibility: 'all'
  },
  computed: {
    filteredTodos () {
      return filters[this.visibility](this.todos)
    },
    remaining () {
      return filters.active(this.todos).length
    },
    allDone: {
      get () {
        return this.remaining === 0
      },
      set (value) {
        this.todos.forEach(todo => {
          todo.completed = value
        })
      }
    }
  },
  watch: {
    todos: {
      handler (todos) {
        save(todos)
      },
      deep: true
    }
  },
  methods: {
    addTodo: function () {
      var value = this.newTodo && this.newTodo.trim()
      if (!value) {
        return
      }
      this.todos.push({
        id: generateId(),
        title: value,
        completed: false
      })
      this.newTodo = ''
    },

    removeTodo (todo) {
      this.todos.splice(this.todos.indexOf(todo), 1)
    },

    editTodo (todo) {
      this.beforeEditCache = todo.title
      this.editedTodo = todo
    },

    doneEdit (todo) {
      if (!this.editedTodo) {
        return
      }
      this.editedTodo = null
      todo.title = todo.title.trim()
      if (!todo.title) {
        this.removeTodo(todo)
      }
    },

    cancelEdit (todo) {
      this.editedTodo = null
      todo.title = this.beforeEditCache
    },

    removeCompleted () {
      this.todos = filters.active(this.todos)
    }
  },
  onLoad () {}
})
</script>

<script name="json">
module.exports = {
}
</script>
